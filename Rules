#!/usr/bin/env ruby

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.

set_environment

preprocess do
  items.each { |i| map_preprocessing(i) if i[:map_params] || i[:map_params_variants] }
  build_jvectormap
  generate_doc
end

# ===========
# = compile =
# ===========

compile '/css/*' do
  # don’t filter or layout
end

compile '/js/*' do
  # don’t filter or layout
end

compile '/data/*' do
  # don’t filter or layout
end

compile '/binary/*' do
  # don’t filter or layout
end

compile '/maps/*_config' do
  # don’t filter or layout map configs
end


compile '*' do
  if !item.binary?
    filter :erb
    if !@config[:no_syntax_highlight] && item[:extension] == 'html'
      filter :colorize_syntax, default_colorizer: :pygmentize
    end
    layout 'default'
  end
end

# ==========
# = routes =
# ==========

route '/binary/*' do
  item.identifier.chop + '.' + (item[:extension] ? item[:extension] : 'zip')
end

route '/css/*' do
  item.identifier.chop + '.' + (item[:extension] ? item[:extension] : 'css')
end

route '/js/*' do
  item.identifier.chop + '.' + (item[:extension] ? item[:extension] : 'js')
end

route '/data/*' do
  item.identifier.chop + '.' + (item[:extension] ? item[:extension] : 'json')
end

route '*' do
  if item.binary?
    # Write item with identifier /foo/ to /foo.ext
    item.identifier.chop + '.' + item[:extension]
  else
    # Write item with identifier /foo/ to /foo/index.html
    item.identifier + 'index.html'
  end
end

layout '*', :erb
